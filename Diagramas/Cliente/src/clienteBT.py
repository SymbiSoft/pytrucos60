# -*- coding: utf-8 -*-
#######################################################
# 
# clienteBT.py
# Python implementation of the Class clienteBT
# Generated by Enterprise Architect
# Created on:      31-mai-2011 15:53:03
# Original author: Wander Jardim
# 
#######################################################


import btsocket as socket
import appuifw

class ClienteBluetooth:
    """Comunicação sobre Bluetooth.
    """
    def __init__(self):
        self.socket = None

    def esta_conectado(self):
        """Retorna se o cliente está conectado.
        """
        return self.socket != None

    def conectar(self):
        """Conecta ao servidor.
        """
        config = {'services':[] }
    
        try:
            if not self.esta_conectado():
                service = self.descobrir_enderecos()
        except Exception, e:
            appuifw.note(u'Nenhum dispositivo escolhido','error')
            print e
            return (None,None)
        try:
            if service:
                config['services'].append(service)
                self.socket = self.conectar_ao_servico(service)
        
        except:
            self.fechar()
            raise BluetoothError(u"Não é possível conectar.")

    def fechar(self):
        """Fecha a conexão.
        """
        try:
            if self.esta_conectado():
                self.socket.close()
        except:
            pass
        finally:
            self.socket = None


    def envia_comando(self, cmd):
        """Envia um comando para o servidor.
        """
        if not self.esta_conectado():
            print "Não está conectado."
            #raise BluetoothError((u"Não está conectado."))
        try:
            self.socket.send(str(cmd))
        except socket.error:
            print "Erro de comunicação."
            #raise BluetoothError((u"Erro de comunicação."))
        except:
            print "Erro inesperado."
            #raise BluetoothError((u"Erro inesperado."))


    def recebe_comando(self):
        """Recebe um comando do servidor.
        """
        if not self.esta_conectado():
            raise BluetoothError(u"Não está conectado.")
        try:
            data = self.socket.recv(1024)
        except socket.error:
            raise BluetoothError(u"Erro de comunicação.")
        except:
            raise BluetoothError(u"Erro inesperado.")
        return data



    def descobrir_enderecos(self):
        """
            O usuário é solicitado a selecionar o dispositivo e serviços.
        """
        address, services = socket.bt_discover()
        if len(services) > 1: #Se esta máquina oferecer mais de um serviço, deixar o usuário escolher o serviço certo
            service_names = services.keys()
            service_names.sort()
            service_list =[unicode(name) for name in service_names]
            choice = appuifw.popup_menu(service_list, u"Escolha o serviço:")
            if choice == None:
                return None
            service_name = service_names[choice]
            port  = services[service_name]
        else:
            service_name,port = services.popitem()

        return (service_name,address, port)


    def conectar_ao_servico(self,servico):
        """
        Conecta ao serviço
        Parameteros:
            servico: (nome,addr,porta)
        Retorna:
            o socket de conexão
        """
        try:
            sock = socket.socket(socket.AF_BT, socket.SOCK_STREAM)
            sock.setblocking(False)
            sock.connect(servico[-2:])
            return sock
        except Exception, e:
            appuifw.note(u'Falha ao conectar ao serviço', 'error')
            return None


class BluetoothError(Exception):
    """
    Erro Bluetooth Genérico.
    """
    def __init__(self, msg):
        self.msg = msg