#######################################################
# 
# jogadorBT.py
# Python implementation of the Class JogadorBT
# Generated by Enterprise Architect
# Created on:      29-jul-2011 22:32:07
# Original author: P_991068
# 
#######################################################
import Jogador

class JogadorBT(Jogador, threading.Thread):
    def __init__ (self, conexao, num, hud):
        threading.Thread.__init__(self)
        self.conexao = conexao
        self.numero = num
        self.estahRodando = False
        self.hud = hud
        self.socket = None
        
    def run(self):
        self.conecta_jogadores()



    def conecta_jogadores(self):
        (self.socket, self.info) = self.conexao.conectaJogador(self.conexao.socket)
        self.nome = self.conexao.obtem_nome(self.info[0])
        print "Iniciei um jogador: %s" % self.nome
        self.hud.informaJogador(self.nome, self.numero)

          

    def envia_comando(self, cmd):
        self.socket.send(cmd)
        print "enviei: %s" % cmd

    def envia_comandoJS(self, cmd):
        self.socket.send(json.write(cmd))
        print "Eu %s envieiJS: %s" % (self.nome, cmd)

    def recebe_comandoJS(self):
        print "esperando comando:"
        rec = json.read(self.socket.recv(1024))
        print "Eu %s recebiJS: %s" % (self.nome, rec)
        return rec
  
    def recebe_comando(self):
        print "esperando comando:"
        rec = self.socket.recv(1024)
        print "recebi: %s" % rec
        return rec

    def conectou(self):
        return self.socket != None


    def desconecta(self):
        self.socket.close()
        print self.nome, ": desconectado"

    def formata_cartas_BT(self):
        cartaBT = []
        for carta in self.mao:
            cartaBT.append(carta.valorBT)
            
        return "cartas:" + "/".join(cartaBT)