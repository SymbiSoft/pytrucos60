#-*- coding: utf-8 -*-
#######################################################
# 
# Pytrucos60.py
# Python implementation of the Class Pytrucos60
# Generated by Enterprise Architect
# Created on:      27-mai-2011 15:33:55
# Original author: Wander Jardim
# 
#######################################################
import appuifw
import e32
import sysinfo
import key_codes
import traceback

from menu import Menu
from configuracoes import Configuracoes
from splash import Splash
from telaCreditos import TelaCreditos
from telaInstrucoes import TelaInstrucoes
from conexao import Conexao
from jogo import Jogo
import util

class Pytrucos60:
    
    def __init__(self):
        appuifw.app.exit_key_handler = self.quit
        self.lagura_tela, self.altura_tela = util.getTamanho_tela()
        #definindo o orientação da tela como paisagens, ou seja a tela deitada.
        appuifw.app.orientation = 'landscape'
        self.configuracao = Configuracoes()
        appuifw.app.title=unicode(self.configuracao.pref['titulo_jogo'])
        self.toque = {}
        #Verificando a versão do pys60 instalada para saber se oferece suporte ao touch e desabilitando o joystick.
        if e32.pys60_version_info > (1,9):
            appuifw.app.directional_pad = False
            if appuifw.touch_enabled():
                appuifw.app.screen= self.configuracao.pref['tela_jogo'] #'large' #
                TOUCH_ENABLED = True
            else:
                appuifw.note(u"Touch screen nao encontrado", "error")
        self.estado_atual = 'splash'
        self.canvas=appuifw.Canvas(event_callback=self.callback,
                                   redraw_callback=lambda rect:self.desenha_estado_menu(self.estado_atual))
        appuifw.app.body = self.canvas
        self.splash = Splash()
        self.splash.desenha_splash(self.canvas)
        self.menu= Menu()
        self.telaCreditos = TelaCreditos()
        self.telaInstrucoes = TelaInstrucoes()
        self.resetar()      


    def resetar(self):
        self.running = 0
        self.estado_atual = 'menu'
        self.carregar_menu(self.estado_atual)
        
        
    def callback(self, evento):
        self.desenha_estado_menu(self.estado_atual)


    def desenha_estado_menu(self, estado_atual):
        """Desenha a tela da seleção atual"""
        if estado_atual == 'menu':
            self.carregar_menu(estado_atual)
        elif estado_atual == 'jogar':
            #try:
            self.grt_conexao = Conexao()
            self.conexao = self.grt_conexao.definir_conexao()
            self.canvas.bind(key_codes.EButton1Down, self.restart, ((5,self.altura_tela - 30), (45,self.altura_tela - 5)))
            self.grt_conexao.carrega_tela_aguarda_conexoes()

            self.jogo = Jogo(self.conexao)
            self.jogo.loop_jogo()
            
    
            #except:
            #    appuifw.note(u"Erro ao estabelecer conexao com o servidor", "error")
            
        elif estado_atual == 'conexao':
            #self.conexoes()
            appuifw.note(u"Conexão", "info")
            #self.estado_atual = 'menu'
        elif estado_atual == 'opcoes':
            #self.opcoes()
            appuifw.note(u"Opções", "info")
            self.estado_atual = 'menu'
        elif estado_atual == 'creditos':
            self.carregarTelaCreditos()
        elif estado_atual == 'instrucoes':
            self.carregarTelaInstrucoes()
        elif estado_atual == 'sair':
            self.quit()

    def carregar_menu(self, estado_atual):
        tela_menu = self.menu.desenha_menu(estado_atual,self.toque)
        self.canvas.blit(tela_menu) # mostra a imagem na tela
        #vincula as áreas de toque
        for i in range(len(self.menu.toque['botoes'])):
            self.canvas.bind(key_codes.EButton1Down, self.menu.toque_down_menu, self.menu.toque['botoes'][i] )
            self.canvas.bind(key_codes.EButton1Up, self.toque_up_menu, self.menu.toque['botoes'][i] )

    def toque_up_menu(self, pos=(0, 0)):
        if self.menu.toque.has_key('main_down'):
            if self.menu.toque['main_down'] == 'jogar':
                self.estado_atual = 'jogar'
                self.desenha_estado_menu(self.estado_atual)
            elif self.menu.toque['main_down'] == 'conexao':
                self.estado_atual = 'conexao'
                self.desenha_estado_menu(self.estado_atual)
            elif self.menu.toque['main_down'] == 'opcoes':
                self.estado_atual = 'opcoes'
                self.desenha_estado_menu(self.estado_atual)
            elif self.menu.toque['main_down'] == 'creditos':
                self.estado_atual = 'creditos'
                self.desenha_estado_menu(self.estado_atual)
            elif self.menu.toque['main_down'] == 'instrucoes':
                self.estado_atual = 'instrucoes'
                self.desenha_estado_menu(self.estado_atual)
            elif self.menu.toque['main_down'] == 'sair':
                self.estado_atual = 'sair'
                self.desenha_estado_menu(self.estado_atual)
            del self.menu.toque['main_down']

    def carregarTelaCreditos(self):
        tela_creditos = self.telaCreditos.desenha_tela(self.estado_atual, self.toque)
        self.canvas.blit(tela_creditos) # mostra a imagem na tela
        for i in self.toque['botoes']:
            self.canvas.bind(key_codes.EButton1Down, self.telaCreditos.toque_down_creditos, i )
            self.canvas.bind(key_codes.EButton1Up, self.voltar_menu, i )
        
    def voltar_menu(self, pos=(0, 0)): 
        if self.toque.has_key('down'):
            if self.toque['down'] == 0:
                self.estado_atual = 'menu'
            del self.toque['down']
            
    def carregarTelaInstrucoes(self):
        self.tela_instrucoes = self.telaInstrucoes.desenha_tela(self.estado_atual, self.toque)
        self.canvas.blit(self.tela_instrucoes) # mostra a imagem na tela
        for i in self.toque['botoes']:
            self.canvas.bind(key_codes.EButton1Down, self.telaInstrucoes.toque_down, i )
            self.canvas.bind(key_codes.EButton1Up, self.voltar_menu, i )
   

    def restart(self, evento):
        print "aceitou o clique"
        self.conexao.fechar()
        self.resetar()
        print "passou por todos os metodos ao fechar"



    def quit(self, rect=None):
        """Função de sair da aplicação
        """
        self.running = -1
        try:
            if self.grt_conexao.esta_conectado() != None:
                print u'EXIT'
                self.conexao.envia_comando(u'sair')
                self.conexao.fechar()
        except:
            pass
        #appuifw.app.set_exit() #TODO:Voltar essa linha quando for compilar para SIS.





