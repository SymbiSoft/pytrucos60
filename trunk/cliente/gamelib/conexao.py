#-*- coding: utf-8 -*-
#######################################################
# 
# conexao.py
# Python implementation of the Class Conexao
# Generated by Enterprise Architect
# Created on:      01-jun-2011 10:40:59
# Original author: Wander
# 
#######################################################

import sysinfo
from graphics import Image
import appuifw
import traceback

import clienteBT
from telaConexoes import TelaConexoes

class Conexao:
    def __init__(self):
        self.render=0
        self.arq_erro = open('E:\\Python\\pytruco\\Meu_error2.log', 'r+')
        self.tela_aguarda_conexoes = TelaConexoes()
        self.canvas = appuifw.Canvas(event_callback = None,
                                     redraw_callback = self.event_redraw)
        appuifw.app.body = self.canvas
        
        self.render=1

    
    def definir_conexao(self):
        opcoes_conexoes = [u"Bluetooth", u"WI-FI", u"GPRS", u"Voltar"]
        conexaoEscolhida = appuifw.popup_menu(opcoes_conexoes, u"Tipo de conexão")
        if conexaoEscolhida == 0:
            conexao = self.conexaoBT()
            
        elif conexaoEscolhida == 1:
            #wifi()
            conexao  = "wifi"
            appuifw.note(u"Vou me conectar por wifi" , "info")
        elif conexaoEscolhida == 2:
            #gprs()
            conexao = "gprs"
            appuifw.note(u"Vou me conectar por gprs" , "info")
        elif conexaoEscolhida == 3:
            self.current_stateMenu = 'menu'
            conexao = 'menu'
            #self.draw_stateMenu()
        del conexaoEscolhida
        
        return conexao

    def conexaoBT(self):
        """Conecta ao servidor.
        """
        self.conexao = clienteBT.ClienteBluetooth()
        try:
            self.conexao.conectar()
            return self.conexao
        except Exception, e:
            appuifw.note(u"Erro na execução do Bluetooth %s"%e, "error")
            return None

    def esta_conectado(self):
        return self.conexao.esta_conectado()

    def event_redraw(self, other):
        print "event_redraw"
        if self.render == 0:
            self.canvas.clear()
        try:
            teste = self.esta_conectado()
            self.carrega_tela_aguarda_conexoes()
        except Exception, exc:
            self.arq_erro.write(traceback.format_exc())
            print "event_redraw except"

    def carrega_tela_aguarda_conexoes(self):
        print "passei em carrega_tela_aguarda_conexoes"
        self.tela_aguarda_conexoes.tela_aguarda_conexoes(self.canvas, self.conexao)
        