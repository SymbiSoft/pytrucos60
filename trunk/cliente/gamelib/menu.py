#-*- coding: utf-8 -*-
#######################################################
# 
# Menu.py
# Python implementation of the Class Menu
# Generated by Enterprise Architect
# Created on:      27-mai-2011 15:34:02
# Original author: Wander Jardim
# 
#######################################################

from graphics import Image
import sysinfo
import e32
import os

IMG_PATH1 = "\\Python\\img\\"
IMG_PATH2 = "\\Data\\python\\img\\"
IMG_PATH3 = "\\Private\\ef0b4099\\img\\"


class Menu:
    botoes = {}
    
    def __init__(self):
        self.largura_tela, self.altura_tela = self.__getTamanho_tela()
        try: 
            self.__caregar_imagens()
        except:
            print "Erro ao carregar as imagens!"
        
        
    def __getTamanho_tela(self):
        return sysinfo.display_pixels()

    def __get_caminho(self, arquivo):
        drives_list = e32.drive_list()
        drives_list.reverse()
        for drive in [str(x) for x in drives_list]:
            if os.path.isfile(os.path.join(drive, IMG_PATH1, arquivo)):
                return os.path.join(drive, IMG_PATH1)
            elif os.path.isfile(os.path.join(drive, IMG_PATH2, arquivo)):
                return os.path.join(drive, IMG_PATH2)
            elif os.path.isfile(os.path.join(drive, IMG_PATH3, arquivo)):
                return os.path.join(drive, IMG_PATH3)
        return None



    def __caregar_imagens(self):
        caminho_img = self.__get_caminho('TelaMenu.png')
        
        self.fundoMenu=self.__cria_imagem(caminho_img + 'TelaMenu.png')
        
        #Carrega a imagem do botão Jogar. 
        self.botoes['jogar'] = self.__cria_imagem(caminho_img + 'btn_jogar_off.png')
        self.botoes['jogar_down'] = self.__cria_imagem(caminho_img + 'btn_jogar_on.png')
         
        #Carrega a imagem do botão Conexões. Se a imagem não existir no diretório, define como vazio.
        self.botoes['conexao'] = self.__cria_imagem(caminho_img + 'btn_conexao_off.png')
        self.botoes['conexao_down'] = self.__cria_imagem(caminho_img + 'btn_conexao_on.png')

        #Carrega a imagem do botão Conexões. Se a imagem não existir no diretório, define como vazio.
        self.botoes['opcoes'] = self.__cria_imagem(caminho_img + 'btn_opcoes_off.png')
        self.botoes['opcoes_down'] = self.__cria_imagem(caminho_img + 'btn_opcoes_on.png')

        #Carrega a imagem do botão Creditos. Se a imagem não existir no diretório, define como vazio.
        self.botoes['creditos'] = self.__cria_imagem(caminho_img + 'btn_creditos_off.png')
        self.botoes['creditos_down'] = self.__cria_imagem(caminho_img + 'btn_creditos_on.png')
        
        #Carrega a imagem do botão Instrucoes. Se a imagem não existir no diretório, define como vazio.
        self.botoes['instrucoes'] = self.__cria_imagem(caminho_img + 'btn_instrucoes_off.png')
        self.botoes['instrucoes_down'] = self.__cria_imagem(caminho_img + 'btn_instrucoes_on.png')
        
        #Carrega a imagem do botão Sair. Se a imagem não existir no diretório, define como vazio.
        self.botoes['sair'] = self.__cria_imagem(caminho_img + 'btn_sair_off.png')
        self.botoes['sair_down'] = self.__cria_imagem(caminho_img + 'btn_sair_on.png')


    def __cria_imagem(self, caminnho):
        """Carrega imagem referente ao parametro passado. Se a imagem não existir no
        diretório, retorna vazio.
        """
        try:
            img = Image.open(caminnho)
            return img
        except:
            print "Imagem não encontrada!"
            return None

    def desenha_menu(self, estado_atual, toque):
        self.toque = toque
        telaMenu = Image.new((self.largura_tela,self.altura_tela))
        telaMenu.clear((15,126,0)) #Define a cor verde de fundo 0x0f7e00
        telaMenu.blit(self.fundoMenu, target =(0,0))

        margem_botao_esq = self.largura_tela/2+1
        margem_botao_dir = self.largura_tela/2+153

        if not self.toque.has_key('state') or self.toque['state'] != estado_atual: # criar uma lista de novos botões
            but = []
            but.append( (( margem_botao_esq , 83), (margem_botao_dir, 127 )) )
            but.append( (( margem_botao_esq ,127), (margem_botao_dir, 171 )) )
            but.append( (( margem_botao_esq ,171), (margem_botao_dir, 215 )) )
            but.append( (( margem_botao_esq ,215), (margem_botao_dir, 259 )) )
            but.append( (( margem_botao_esq ,259), (margem_botao_dir, 303 )) )
            but.append( (( margem_botao_esq ,303), (margem_botao_dir, 345 )) )

            if self.toque.has_key('botoes'): del self.toque['botoes'][:]
            self.toque['state'] = estado_atual
            self.toque['botoes'] = but

        for i in range(len(self.toque['botoes'])):
            telaMenu.rectangle(self.toque['botoes'][i],outline=0x000000, width=2)

        def blit_button(name, xpos):
            if self.toque.has_key('main_down') and self.toque['main_down'] == name:
                name += '_down'

            if self.botoes[name]:
                telaMenu.blit(self.botoes[name], target = xpos ) #, scale = 2)

        blit_button('jogar',       self.toque['botoes'][0][0])
        blit_button('conexao',     self.toque['botoes'][1][0])
        blit_button('opcoes',      self.toque['botoes'][2][0])
        blit_button('creditos',    self.toque['botoes'][3][0])
        blit_button('instrucoes',  self.toque['botoes'][4][0])
        blit_button('sair',        self.toque['botoes'][5][0])
        
        return telaMenu


    def tocou_no_botao(self,pos, botao):
        if  pos[0] >= botao[0][0] and pos[0] <  botao[1][0]\
        and pos[1] >= botao[0][1] and pos[1] <  botao[1][1]:
            return True
        return False

    def toque_down_menu(self, pos=(0, 0)):
        try:
            if self.tocou_no_botao(pos, self.toque['botoes'][0]) :
                self.toque['main_down'] = 'jogar'
            elif self.tocou_no_botao(pos, self.toque['botoes'][1]) :
                self.toque['main_down'] = 'conexao'
            elif self.tocou_no_botao(pos, self.toque['botoes'][2]):
                self.toque['main_down'] = 'opcoes'
            elif self.tocou_no_botao(pos, self.toque['botoes'][3]) :
                self.toque['main_down'] = 'creditos'
            elif self.tocou_no_botao(pos, self.toque['botoes'][4]) :
                self.toque['main_down'] = 'instrucoes'
            elif self.tocou_no_botao(pos, self.toque['botoes'][5]) :
                self.toque['main_down'] = 'sair'
        except:
            pass






